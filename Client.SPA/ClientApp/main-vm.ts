import 'isomorphic-fetch';                      //   for fetch() support
import * as ES6Promise from "es6-promise";      //   for Promise support

import * as ko from 'knockout';
import { createBrowserHistory } from 'history';
import { Route, Router } from './router';

import navMenu from './components/nav-menu/nav-menu';
import homePage from './components/home-page/home-page';
import fetchHelper from './fetchHelper';
import { SpaService } from './_autogenerated/SpaApiService';

class VM {

    public router: Router;
    public routes: Route[] = [
        {
            url: '/',
            component: 'home-page',
            isActive: ko.observable(false),
            glyph: 'glyphicon glyphicon-home',
            text: 'Home',
            visible: true
        }
    ];

    constructor() {
        ES6Promise.polyfill();

        //  up front register home page & main menu 
        ko.components.register('nav-menu', navMenu);
        ko.components.register('home-page', homePage);

        const baseUrl = (window as any).baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');
        const baseApiUrl = (window as any).baseApiUrl = document.getElementsByTagName('baseApiUrl')[0].getAttribute('href');
        fetchHelper.API_ACCESS_TOKEN = (window as any).apiAccessToken;
        const basename = baseUrl.substring(0, baseUrl.length - 1); // History component needs no trailing slash
        (window as any).basename = basename;
        const history = createBrowserHistory({ basename });

        // create router
        this.router = new Router(history, basename, this.routes, this.onRouteChanged, this.onRouteNotFound);
        this.router.start();
    }

    private onRouteChanged = (url: string) => {
        console.log('new route:', url);
        this.routes.forEach(r => r.isActive(r.url == url));
    }
    private onRouteNotFound = (url: string) => {
        console.log('route not found:', url);
        this.routes.forEach(r => r.isActive(false));

        //  back to unprotected landing page
        if (url == '/') {
            window.location.href = "/";
            return;
        }

        this.router.currentRoute({
            url: url,
            component: 'route-not-found',
            isActive: ko.observable(false)
        });
    }
    private logout = async () => {
        await SpaService.logoutAsync();
        window.location.href = "/";
    }
}
export var vm = new VM();

